<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mycat:server>
<mycat>
    <server-config>
		<system>
			<property name="sequnceHandlerType">2</property>
			<property name="serverPort">8066</property>
			<property name="managerPort">9066</property>
			<property name="charset">utf8</property>
		</system>
		<user name="root">
			<property name="password">lijh17808</property>
			<property name="schemas">TESTDB</property>
		</user>
    </server-config>
    
    <schema-config>
		<schema name="TESTDB" checkSQLschema="false" sqlMaxLimit="100">
			<!-- auto sharding by id (long) -->
			
			<!-- 
				name：逻辑表的名称，这个名称和在数据库中执行create table 的名称一致，同个schema中table name必须唯一
				dataNode:逻辑表所属的dataNode
				rule:逻辑表使用的规则名称
				ruleRequired:如果没有指定分片规则，抛出异常
				primaryKey:逻辑表对应真是表的主键。如果按照非主键进行分片，那么会在所有dataNode上发sql。
					如果配置了该属性，则会缓存主键和具体DN的信息，那么再次使用非主键进行查询的时候，直接在指定的dataNode上按主键进行查询。
				type:定义逻辑表的类型，有逻辑表和全局表
				autoIncrement:
					"true":指定表使用自增长主键，这样mycat不会抛出分片键找不到异常
					“false”:默认值。禁用该功能。
					
				needAddLimit:  (true,false)
					默认查询limit 100;
				
			 -->
			<table name="travelrecord" dataNode="dn1,dn2,dn3" rule="auto-sharding-long" needAddLimit="100"/><!-- dataNode="dn$1-3" -->
			
			
			<!-- 
				childTable用于定义E-R分片的字表；
				name:子表的名称
				joinKey：插入子表的时候使用这个列的值查找父表存储的数据节点
				
				parentKey:
					属性指定的值一般为不父表建立关联关系的列名。程序首先通过 joinkey 的值，再通过 parentKey 属性指定
				的列名产生查询语句，通过执行该语句得到父表存储在哪个分片上。从而确定字表存储的位置。
				
				needAddLimit：(true,false)
					默认查询limit 100;
			 -->
			<!-- 
			<table name="company" primaryKey="id" dataNode="dn1,dn2,dn3" rule="sharding-by-mod"/>
			<table name="customer" primaryKey="ID" dataNode="dn1,dn2" rule="sharding-by-enum">
				<childTable name="orders" primaryKey="ID" joinKey="customer_id" parentKey="id" />
				<childTable name="order_items" joinKey="order_id" parentKey="id" />
				<childTable name="customer_addr" primaryKey="ID" joinKey="customer_id" parentKey="id" />
			</table>
		 -->
		</schema>


		<!-- 
			dataNode定义了MyCat中的数据节点，也就是通常所说的数据分片。一个dataNode就是一个独立的数据分片。
			name属性：
				唯一标识数据节点。我们需要在table标签上设置节点集合，来建立水平拆分后，表分散到的分片的关系。
			dataHost属性：
				标识分片属于哪个数据库实例
			database属性：
				定义该分片属性属于那个具体数据库实例上的具体库，这里使用两个维度来定义分片，实例+具体的库。
		
		 -->
		 
		 
		<!-- 使用名字为localhost1数据库实例上的db1物理数据库，这就组成了一个分片，最后，我们使用名字db1作为该分片的标识 -->
		<dataNode name="dn1" dataHost="localhost1" database="db1" />
		<dataNode name="dn2" dataHost="localhost1" database="db2" />
		<dataNode name="dn3" dataHost="localhost1" database="db3" />
			
		<!-- 
			name:唯一标识dataHost
			maxCon:指定每个读写实例连接池的最大连接。标签内嵌的writeHost、readHost标签都会使用这个属性值来实例化出连接池的最大连接数
			minCon:连接池的最先连接数，初始化连接池的大小
			balance:
				负载均衡参数
				"0":不开启读写分离机制，所有读操作都发送到当前可用的writeHost节点上
				"1":全部的readHost和stand by writeHost参与select语句的负载均衡，简单来说，当双主双从模式（M1->S1,M2->S2,并且M1和M2互为主备)，正常情况下，M2，S1，S2都参与select语句的负载均衡
				"2":所有的读操作随机在readHost和writeHost上分发
				"3":所有读操作都在writeHost对应的readHost上，writerHost不负担读压力，注意balance=3设置选项since1.4开始支持				
				
			writeType:
				负载均衡参数：
				"0":所有写操作发送到配置的第一个writeHost，第一个挂了切到第二个writeHost，重新启动后以切换后的为准，切换记录在配置文件dnindex.properties
				“1”：所有写操作随机发送到writeHost，1.5以后废弃不推荐
			dbType:
				数据库类型。目前支持二进制mysql协议，其它还有使用jdbc连接的数据库，如mongodb,oracle,spark etc.
				
			dbDriver:
				指定连接后台数据库使用的Driver，目前可选的值有native和jdbc。
				native:使用二进制mysql协议，所以可以使用mysql和maridb。
				其它类型数据库需要jdbc驱动来支持。
			
			switchType属性：
				"-1":标识不自动切换
				“1”：默认值，自动切换
				“2”：基于Mysql主从同步关系决定是否切换
					心跳语句为show slave status
				“3”：基于mysql galary cluster的切换机制（适合集群）（1.4.1）
					心跳语句为show status like ‘wsrep%‘
				
			tempReadHostAvailable属性：
				如果配置了这个属性，writeHost下面的readHost仍旧可用。默认为0（0，1）
		 -->
		<dataHost name="localhost1" maxCon="1000" minCon="10" balance="0"
			writeType="0" dbType="mysql" dbDriver="native" switchType="1" tempReadHostAvailable="0"
			slaveThreshold="100">
			<heartbeat>select user()</heartbeat><!-- mysql心跳语句 --><!--oracle心跳语句 <heartbeat>select 1 from dual</heartbeat> -->
			<!-- can have multi write hosts -->
			<writeHost host="hostM1" url="localhost:3306" user="root" password="lijh17808">
				<!-- can have multi read hosts -->
				
				<!-- 
				
				weight:readHost中作为读节点的权重（since 1.4）
				usingDecrypt：是否对密码加密（since 1.4),默认是0，如果需要开启则设置为1
				
				 -->
				<readHost host="hostS1" url="192.168.1.200:3306" user="root" password="digdeep" />
			</writeHost>
		</dataHost>
		
		<dataNode name="dn4" dataHost="jdbchost" database="mycat_node1" />
        <dataNode name="dn5" dataHost="jdbchost" database="mycat_node1" />
        
	    <dataHost name="jdbchost" maxCon="2000" minCon="10" balance="1"
	       writeType="0" dbType="mysql" dbDriver="native" switchType="1">
			<heartbeat>select 1</heartbeat>
			<writeHost host="master" url="192.168.1.3:3306" user="root" password="lexin112358"></writeHost>
		</dataHost>
    </schema-config>
    
    <rule-config>
        <tableRule name="sharding-by-hour" column="create_time" functionName="io.mycat.route.function.LatestMonthPartion">
            <property name="splitOneDay">24</property>
        </tableRule>
        <tableRule name="sharding-by-date" column="create_time" functionName="io.mycat.route.function.PartitionByDate">
            <property name="dateFormat">yyyy-MM-dd</property>
            <property name="sBeginDate">2014-01-01</property>
            <property name="sPartionDay">10</property>
        </tableRule>
        <tableRule name="sharding-by-enum" column="create_time" functionName="io.mycat.route.function.PartitionByFileMap">
            <property name="type">0</property>
            <property name="defaultNode">0</property>
            <config>
                <!--10000=0 10010=1  -->
                <property name="10000">0</property>
                <property name="10010">1</property>
            </config>
        </tableRule>
        <tableRule name="sharding-by-JumpConsistentHash" column="id" functionName="io.mycat.route.function.PartitionByJumpConsistentHash">
            <property name="totalBuckets">3</property>
        </tableRule>
        <tableRule name="auto-sharding-long" column="id" functionName="io.mycat.route.function.AutoPartitionByLong">
            <property name="defaultNode">0</property>
            <config>
                <!-- # range start-end ,data node index # K=1000,M=10000. -->
                <property name="0-2000000">0</property>
                <property name="2000001-4000000">1</property>
                <property name="4000001-8000000">2</property>
            </config>
        </tableRule>
        <tableRule name="sharding-by-mod" column="id" functionName="io.mycat.route.function.PartitionByMod">
            <property name="count">3</property>
        </tableRule>
        <tableRule name="sharding-by-month" column="create_time" functionName="io.mycat.route.function.PartitionByMonth">
           <property name="dateFormat">yyyy-MM-dd</property>
           <property name="sBeginDate">2014-01-01</property>
        </tableRule>
        <tableRule name="sharding-by-MurmurHash" column="id" functionName="io.mycat.route.function.PartitionByMurmurHash">
           <property name="seed">0</property>
           <property name="count">2</property>
           <property name="virtualBucketTimes">160</property>
           <!-- <property name="weightMapFile">weightMapFile</property>
           <property name="bucketMapPath">/home/usr/mycat/bucketMapPath</property>
           -->
        </tableRule>
        <tableRule name="sharding-by-Pattern" column="id" functionName="io.mycat.route.function.PartitionByPattern">
            <property name="patternValue">256</property>
            <property name="defaultNode">2</property>
            <config>
                <!-- # # id partition range start-end ,data node index ###### first host configuration -->
                <property name="1-32">0</property>
                <property name="33-64">1</property>
                <property name="65-96">2</property>
                <property name="97-128">3</property>
                <!-- ######## second host configuration -->
                <property name="129-160">4</property>
                <property name="161-192">5</property>
                <property name="193-224">6</property>
                <property name="225-256">7</property>
                <property name="0-0">7</property>
            </config>
        </tableRule>
        <tableRule name="sharding-by-PrefixPattern" column="id" functionName="io.mycat.route.function.PartitionByPrefixPattern">
            <property name="patternValue">32</property>
            <property name="prefixLength">5</property>
            <config>
                <!-- # range start-end ,data node index # ASCII # 8-57=0-9阿拉伯数字 # 64、65-90=@、A-Z # 97-122=a-z -->
                <property name="1-4">0</property>
                <property name="5-8">1</property>
                <property name="9-12">2</property>
                <property name="13-16">3</property>
                <!-- ######## second host configuration -->
                <property name="17-20">4</property>
                <property name="21-24">5</property>
                <property name="25-28">6</property>
                <property name="29-32">7</property>
                <property name="0-0">7</property>
            </config>
        </tableRule>
        <!-- sPartionDay代表多少天分一个分片 groupPartionSize代表分片组的大小 -->
        <tableRule name="sharding-by-RangeDateHash" column="create_time" functionName="io.mycat.route.function.PartitionByRangeDateHash">
           <property name="sBeginDate">2014-01-01 00:00:00</property>
           <property name="sPartionDay">3</property>
           <property name="dateFormat">yyyy-MM-dd HH:mm:ss</property>
           <property name="groupPartionSize">6</property>
        </tableRule>
        <!-- sPartionDay代表多少天分一个分片 groupPartionSize代表分片组的大小 -->
        <tableRule name="auto-sharding-rang-mod" column="id" functionName="io.mycat.route.function.PartitionByRangeMod">
           <property name="defaultNode">21</property>
           <config>
                <!-- # range start-end ,data node group size 以下配置一个范围代表一个分片组，=号后面的数字代表该分片组所拥有的分片的数量。-->
                <property name="0-200M">5</property>
                <property name="200M1-400M">1</property>
                <property name="400M1-600M">4</property>
                <property name="600M1-800M">4</property>
                <property name="800M1-1000M">6</property>
            </config>
        </tableRule>
        <!-- /** * “2” -> (0,2) * “1:2” -> (1,2) * “1:” -> (1,0) * “-1:” -> (-1,0) * “:-1” -> (0,-1) * “:” -> (0,0) */  -4,0代表倒数后4个 -->
        <tableRule name="sharding-by-String" column="create_time" functionName="io.mycat.route.function.PartitionByString">
           <property name="partitionLength">512</property><!-- zero-based -->
           <property name="partitionCount">2</property>
           <property name="hashSlice">0:2</property>
        </tableRule>
        <!--  根据Velocity模板语言，分库分表规则更加灵活，例如一共100个分库，字段中包含时间信息，取时间的月份与天，hashCode再对100取余 -->
        <tableRule name="sharding-by-PartitionByVelocity" column="create_time" functionName="io.mycat.route.function.PartitionByVelocity">
           <property name="columnName">id</property><!--id="20010222330011" partition=95 -->
           <property name="rule"><![CDATA[
					#set($Integer=0)##
					#set($monthday=$stringUtil.substring($id,4,8))##
					#set($prefix=$monthday.hashCode()%100)##
		    			$!prefix]]>
		   </property>
        </tableRule>
        <tableRule name="sharding-by-PartitionDirectBySubString" column="create_time" functionName="io.mycat.route.function.PartitionDirectBySubString">
           <property name="startIndex">0</property><!-- zero-based -->
           <property name="size">2</property>
           <property name="partitionCount">8</property>
           <property name="defaultPartition">0</property>
        </tableRule>
    </rule-config>
    
    <sequence-config>
          <!-- GLOBAL_SEQ.HISIDS= GLOBAL_SEQ.MINID=1001 GLOBAL_SEQ.MAXID=1000000000 GLOBAL_SEQ.CURID=1000 -->
          <sequence type="0" class="io.mycat.server.sequence.IncrSequencePropHandler">
             <!-- <property name="filePath">dn1</property> -->
	      </sequence>
    </sequence-config>
    
    <!-- 
    <cluster-config>
       <cluster name="cluster">
          <node name="mycat1">
              <property name="host">127.0.0.1</property>
		      <property name="weight">1</property>
		  </node>
		</cluster>
		 隔离区定义，可以限定某个主机上只允许某个用户登录。
	    <quarantine>
	       <host name="1.2.3.4">
	           <property name="user">test</property>
		   </host>
		</quarantine>
    </cluster-config>
     -->
     
    <!-- <dnindex-config>
        <property name="jdbchost">0</property>
    </dnindex-config> -->
    
    <!--  charset-config 已经没有作用了，可以去掉
    <charset-config>
         <property name="55">utf8</property>
    </charset-config>
 	-->
</mycat>